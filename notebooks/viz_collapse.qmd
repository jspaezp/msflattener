---
title: "Visualizing centroiding"
format: gfm
jupyter: python3
---

```{python}
from msflattener.bruker import centroid_ims, get_timstof_data
import matplotlib.pyplot as plt
import polars as pl
import numpy as np

# Data from the alphatims paper from the mann lab
out = get_timstof_data("data/20210510_TIMS03_EVO03_PaSk_MA_HeLa_50ng_5_6min_DDA_S1-B1_1_25185.d", progbar=False, safe=False)
print(out)

```

```{python}
centroided_out = centroid_ims(out, min_neighbors=2, mz_distance=0.02, ims_distance=0.02, progbar=False)
print(centroided_out)
```


```{python}
MZ_LIMS=(898, 902)
IMS_LIMS = (0.80, 1.20)
RT_LIMS = (200, 210)
QUAD_LOW_VAL=-1

promise = (
    pl.col("rt_values")
    .is_between(*RT_LIMS) &
    pl.col("quad_low_mz_values")
    .is_between(QUAD_LOW_VAL-0.01, QUAD_LOW_VAL+0.011)
)
orig = out.filter(promise)
collapsed = centroided_out.filter(promise)

print(orig)
print(collapsed)
```


```{python}
for x in collapsed["rt_values"].sort():
    tmp_orig = orig.filter(pl.col("rt_values").is_between(x - 0.001, x + 0.001))
    tmp_collapsed = collapsed.filter(pl.col("rt_values").is_between(x - 0.001, x + 0.001))

    plt.scatter(
        np.concatenate(tmp_orig["mz_values"]),
        np.concatenate([[x]*len(y) for y, x in zip(tmp_orig["mz_values"], tmp_orig["mobility_values"])]),
        s = np.sqrt(np.concatenate(tmp_orig["corrected_intensity_values"])),
        alpha = 0.1,
        c = "black",
    )
    plt.scatter(
        np.concatenate(tmp_collapsed["mz_values"]),
        np.concatenate(tmp_collapsed["mobility_values"]),
        c = np.concatenate(tmp_collapsed["corrected_intensity_values"]),
        s = np.sqrt(np.concatenate(tmp_collapsed["corrected_intensity_values"])),
    )
    plt.xlim(*MZ_LIMS)
    plt.ylim(*IMS_LIMS)

    plt.xlabel("m/z")
    plt.ylabel("Ion Mobility")
    plt.title(f"RT = {x}")
    plt.colorbar()
    plt.show()

```
